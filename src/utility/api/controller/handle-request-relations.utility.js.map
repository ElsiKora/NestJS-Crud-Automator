{"version":3,"file":"handle-request-relations.utility.js","sourceRoot":"","sources":["handle-request-relations.utility.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAErD,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,mCAAmC,EAAE,MAAM,eAAe,CAAC;AACpE,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AAEpE,MAAM,CAAC,KAAK,UAAU,mCAAmC,CAAI,gBAAyC,EAAE,UAAuC,EAAE,cAAgF,EAAE,UAAuE;IACzS,IAAI,cAAc,EAAE,mBAAmB,EAAE,CAAC;QACzC,KAAK,MAAM,YAAY,IAAI,gBAAgB,CAAI,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;YAE9G,IAAI,UAAU,CAAC,YAAY,CAAC,KAAK,SAAS,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;gBAChF,IAAI,cAAc,CAAC,qBAAqB,KAAK,mCAAmC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;oBACnJ,SAAS;gBACV,CAAC;gBAED,IAAI,WAAiD,CAAC;gBAEtD,IAAI,cAAc,CAAC,oBAAoB,KAAK,mCAAmC,CAAC,MAAM,EAAE,CAAC;oBACxF,MAAM,iBAAiB,GAAY,cAAc,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;oBAElF,IAAI,iBAAiB,KAAK,SAAS,EAAE,CAAC;wBACrC,MAAM,cAAc,CAAC,2CAA2C,YAAY,iBAAiB,CAAC,CAAC;oBAChG,CAAC;oBACD,WAAW,GAAG,iBAA6C,CAAC;gBAC7D,CAAC;qBAAM,CAAC;oBACP,WAAW,GAAG,GAAG,YAAY,SAAqC,CAAC;gBACpE,CAAC;gBAED,IAAI,CAAC,WAAW,EAAE,CAAC;oBAClB,MAAM,cAAc,CAAC,2CAA2C,YAAY,EAAE,CAAC,CAAC;gBACjF,CAAC;gBAED,MAAM,OAAO,GAAY,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBAEvD,IAAI,CAAC,OAAO,EAAE,CAAC;oBACd,IAAI,CAAC,cAAc,CAAC,oBAAoB,KAAK,mCAAmC,CAAC,IAAI,IAAI,cAAc,CAAC,mCAAmC,CAAC,IAAI,cAAc,CAAC,oBAAoB,KAAK,mCAAmC,CAAC,MAAM,EAAE,CAAC;wBACpO,MAAM,cAAc,CAAC,WAAW,WAAqB,0BAA0B,CAAC,CAAC;oBAClF,CAAC;oBACD,SAAS;gBACV,CAAC;gBAED,IAAI,CAAC,CAAC,OAAO,YAAY,cAAc,CAAC,EAAE,CAAC;oBAC1C,MAAM,cAAc,CAAC,WAAW,WAAqB,uCAAuC,CAAC,CAAC;gBAC/F,CAAC;gBAED,MAAM,iBAAiB,GAAiC;oBACvD,KAAK,EAAE;wBACN,EAAE,EAAE,UAAU,CAAC,YAAY,CAAC;qBACL;iBACxB,CAAC;gBAEF,MAAM,MAAM,GAAwB,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAwB,CAAC;gBAElG,IAAI,CAAC,MAAM,EAAE,CAAC;oBACb,MAAM,IAAI,mBAAmB,CAAC,WAAW,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACrE,CAAC;gBAGD,UAAU,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC;YACnC,CAAC;QACF,CAAC;IACF,CAAC;AACF,CAAC","sourcesContent":["import type { DeepPartial, FindOptionsWhere } from \"typeorm\";\n\nimport type { IApiControllerProperties } from \"../../../interface\";\nimport type { TApiControllerGetListQuery, TApiControllerMethod, TApiControllerPropertiesRouteBaseRequestRelations, TApiFunctionGetProperties, TApiServiceKeys } from \"../../../type\";\n\nimport { BadRequestException } from \"@nestjs/common\";\n\nimport { ApiServiceBase } from \"../../../class\";\nimport { EApiControllerLoadRelationsStrategy } from \"../../../enum\";\nimport { ErrorException } from \"../../error-exception.utility\";\nimport { GetEntityColumns } from \"../../get-entity-columns.utility\";\n\nexport async function ApiControllerHandleRequestRelations<E>(controllerMethod: TApiControllerMethod<E>, properties: IApiControllerProperties<E>, relationConfig: TApiControllerPropertiesRouteBaseRequestRelations<E> | undefined, parameters: DeepPartial<E> | Partial<E> | TApiControllerGetListQuery<E>): Promise<void> {\n\tif (relationConfig?.shouldLoadRelations) {\n\t\tfor (const propertyName of GetEntityColumns<E>({ entity: properties.entity, shouldTakeRelationsOnly: true })) {\n\t\t\t// @ts-expect-error\n\t\t\tif (parameters[propertyName] !== undefined && typeof propertyName === \"string\") {\n\t\t\t\tif (relationConfig.relationsLoadStrategy === EApiControllerLoadRelationsStrategy.MANUAL && !relationConfig.relationsToLoad.includes(propertyName)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet serviceName: keyof TApiServiceKeys<E> | undefined;\n\n\t\t\t\tif (relationConfig.servicesLoadStrategy === EApiControllerLoadRelationsStrategy.MANUAL) {\n\t\t\t\t\tconst manualServiceName: unknown = relationConfig.relationsServices[propertyName];\n\n\t\t\t\t\tif (manualServiceName === undefined) {\n\t\t\t\t\t\tthrow ErrorException(`Service name not specified for property ${propertyName} in manual mode`);\n\t\t\t\t\t}\n\t\t\t\t\tserviceName = manualServiceName as keyof TApiServiceKeys<E>;\n\t\t\t\t} else {\n\t\t\t\t\tserviceName = `${propertyName}Service` as keyof TApiServiceKeys<E>;\n\t\t\t\t}\n\n\t\t\t\tif (!serviceName) {\n\t\t\t\t\tthrow ErrorException(`Service name not specified for property ${propertyName}`);\n\t\t\t\t}\n\n\t\t\t\tconst service: unknown = controllerMethod[serviceName];\n\n\t\t\t\tif (!service) {\n\t\t\t\t\tif ((relationConfig.servicesLoadStrategy === EApiControllerLoadRelationsStrategy.AUTO && relationConfig.shouldForceAllServicesToBeSpecified) || relationConfig.servicesLoadStrategy === EApiControllerLoadRelationsStrategy.MANUAL) {\n\t\t\t\t\t\tthrow ErrorException(`Service ${serviceName as string} not found in controller`);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!(service instanceof ApiServiceBase)) {\n\t\t\t\t\tthrow ErrorException(`Service ${serviceName as string} is not an instance of BaseApiService`);\n\t\t\t\t}\n\n\t\t\t\tconst requestProperties: TApiFunctionGetProperties<E> = {\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: parameters[propertyName],\n\t\t\t\t\t} as FindOptionsWhere<E>,\n\t\t\t\t};\n\n\t\t\t\tconst entity: E[keyof E & string] = (await service.get(requestProperties)) as E[keyof E & string];\n\n\t\t\t\tif (!entity) {\n\t\t\t\t\tthrow new BadRequestException(`Invalid ${String(propertyName)} ID`);\n\t\t\t\t}\n\n\t\t\t\t// @ts-expect-error\n\t\t\t\tparameters[propertyName] = entity;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}