{"version":3,"file":"filter-order-by-from-entity.utility.js","sourceRoot":"","sources":["filter-order-by-from-entity.utility.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,sBAAsB,EAAE,MAAM,SAAS,CAAC;AAEjD,OAAO,EAAE,6BAA6B,EAAE,wCAAwC,EAAE,MAAM,gBAAgB,CAAC;AAEzG,OAAO,kBAAkB,CAAC;AAE1B,MAAM,UAAU,uBAAuB,CAAI,MAAqB,EAAE,cAA6B,EAAE,MAAqB,EAAE,OAAoB,EAAE,aAAmD;IAChM,MAAM,QAAQ,GAAwB,sBAAsB,EAAE,CAAC;IAC/D,MAAM,OAAO,GAA8B,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAA0B,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;IAE5H,IAAI,aAAa,EAAE,CAAC;QACnB,MAAM,YAAY,GAAgB,IAAI,GAAG,CAAS,OAAO,CAAC,GAAG,CAAC,CAAC,GAAuB,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;QAE9G,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE,CAAC;YACnC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC9B,MAAM,IAAI,KAAK,CAAC,UAAU,KAAK,iCAAiC,CAAC,CAAC;YACnE,CAAC;QACF,CAAC;IACF,CAAC;IAED,MAAM,WAAW,GAAqC,EAAE,CAAC;IAEzD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;QAC9B,MAAM,UAAU,GAAmB,MAAM,CAAC,OAAO,EAAE,IAAsB,IAAK,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,CAAC,SAAmB,EAAE,MAAM,CAAC,YAAY,CAAmB,CAAC;QAEpL,MAAM,aAAa,GAAY,CAAC,OAAO,UAAU,KAAK,UAAU,IAAI,CAAC,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,gCAAgC,CAAC,QAAQ,CAAC,UAAoB,CAAC,IAAI,CAAC,aAAa,KAAK,SAAS,IAAI,aAAa,CAAC,MAAM,CAAC,YAAmC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;QAExV,IAAI,aAAa,EAAE,CAAC;YACnB,KAAK,MAAM,cAAc,IAAI,cAAc,CAAC,OAAO,EAAE,CAAC;gBACrD,MAAM,QAAQ,GAAoC,cAAc,CAAC,QAAQ,EAAE,CAAC,wCAAwC,CAAC,sBAAsB,CAAoC,CAAC;gBAEhL,MAAM,WAAW,GAAyB,QAAQ,EAAE,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,kBAA8B,IAAI,KAAK,CAAC;gBAE7H,IAAI,cAAc,CAAC,IAAI,IAAI,MAAM,CAAC,YAAY,IAAI,QAAQ,IAAI,CAAC,WAAW,IAAI,SAAS,IAAI,WAAW,CAAC,EAAE,CAAC;oBACzG,MAAM,cAAc,GAAW,MAAM,CAAC,YAAY;yBAEhD,KAAK,CAAC,EAAE,CAAC;yBACT,GAAG,CAAC,CAAC,IAAY,EAAE,KAAa,EAAU,EAAE;wBAC5C,IAAI,KAAK,GAAG,CAAC,IAAI,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;4BAC7E,OAAO,GAAG,GAAG,IAAI,CAAC;wBACnB,CAAC;wBAED,OAAO,IAAI,CAAC;oBACb,CAAC,CAAC;yBACD,IAAI,CAAC,EAAE,CAAC;yBACR,WAAW,EAAE,CAAC;oBAEhB,WAAW,CAAC,cAAwD,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC;gBAC7F,CAAC;YACF,CAAC;QACF,CAAC;IACF,CAAC;IAED,OAAO,WAAW,CAAC;AACpB,CAAC","sourcesContent":["import type { Type } from \"@nestjs/common\";\nimport type { ObjectLiteral } from \"typeorm\";\nimport type { ColumnMetadataArgs } from \"typeorm/metadata-args/ColumnMetadataArgs\";\nimport type { MetadataArgsStorage } from \"typeorm/metadata-args/MetadataArgsStorage\";\n\nimport type { EApiDtoType, EApiRouteType } from \"../../enum\";\nimport type { IApiEntity } from \"../../interface\";\nimport type { TApiFilterOrderBy, TFilterFieldSelector } from \"../../type\";\n\nimport { getMetadataArgsStorage } from \"typeorm\";\n\nimport { FILTER_API_INTERFACE_CONSTANT, PROPERTY_DESCRIBE_DECORATOR_API_CONSTANT } from \"../../constant\";\n\nimport \"reflect-metadata\";\n\nexport function FilterOrderByFromEntity<E>(entity: ObjectLiteral, entityMetadata: IApiEntity<E>, method: EApiRouteType, dtoType: EApiDtoType, fieldSelector?: TFilterFieldSelector<typeof entity>): TApiFilterOrderBy<typeof entity> {\n\tconst metadata: MetadataArgsStorage = getMetadataArgsStorage();\n\tconst columns: Array<ColumnMetadataArgs> = metadata.columns.filter((column: ColumnMetadataArgs) => column.target == entity);\n\n\tif (fieldSelector) {\n\t\tconst entityFields: Set<string> = new Set<string>(columns.map((col: ColumnMetadataArgs) => col.propertyName));\n\n\t\tfor (const field in fieldSelector) {\n\t\t\tif (!entityFields.has(field)) {\n\t\t\t\tthrow new Error(`Field \"${field}\" does not exist in the entity.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst accumulator: TApiFilterOrderBy<typeof entity> = {};\n\n\tfor (const column of columns) {\n\t\tconst columnType: string | Type = (column.options?.type as string | Type) || (Reflect.getMetadata(\"design:type\", entity.prototype as object, column.propertyName) as string | Type);\n\n\t\tconst isAllowedType: boolean = (typeof columnType === \"function\" && (columnType === String || columnType === Number || columnType === Date)) || (FILTER_API_INTERFACE_CONSTANT.ALLOWED_ENTITY_TO_FILTER_COLUMNS.includes(columnType as string) && (fieldSelector === undefined || fieldSelector[column.propertyName as keyof typeof entity] !== false));\n\n\t\tif (isAllowedType) {\n\t\t\tfor (const metadataColumn of entityMetadata.columns) {\n\t\t\t\tconst metadata: Record<string, any> | undefined = metadataColumn.metadata?.[PROPERTY_DESCRIBE_DECORATOR_API_CONSTANT.METADATA_PROPERTY_NAME] as Record<string, any> | undefined;\n\t\t\t\t// eslint-disable-next-line @elsikora/typescript/no-unsafe-member-access\n\t\t\t\tconst useAsFilter: boolean | undefined = (metadata?.properties?.[method]?.[dtoType]?.useAsOrderByFilter as boolean) ?? false;\n\n\t\t\t\tif (metadataColumn.name == column.propertyName && metadata && (useAsFilter == undefined || useAsFilter)) {\n\t\t\t\t\tconst snakeUpperCase: string = column.propertyName\n\t\t\t\t\t\t// eslint-disable-next-line @elsikora/unicorn/prefer-spread\n\t\t\t\t\t\t.split(\"\")\n\t\t\t\t\t\t.map((char: string, index: number): string => {\n\t\t\t\t\t\t\tif (index > 0 && char === char.toUpperCase() && char !== char.toLowerCase()) {\n\t\t\t\t\t\t\t\treturn \"_\" + char;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn char;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join(\"\")\n\t\t\t\t\t\t.toUpperCase();\n\n\t\t\t\t\taccumulator[snakeUpperCase as keyof TApiFilterOrderBy<typeof entity>] = column.propertyName;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn accumulator;\n}\n"]}