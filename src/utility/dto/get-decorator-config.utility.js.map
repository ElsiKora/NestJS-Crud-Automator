{"version":3,"file":"get-decorator-config.utility.js","sourceRoot":"","sources":["get-decorator-config.utility.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,oBAAoB,EAAE,MAAM,qCAAqC,CAAC;AAE3E,OAAO,EAAE,yBAAyB,EAAE,MAAM,oCAAoC,CAAC;AAG/E,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAiD,MAAS,EAAE,QAAwC,EAAE,OAAU,EAAE,YAAoB,EAAqC,EAAE;IACjN,MAAM,QAAQ,GAAyC,oBAAoB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAEpG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,oBAAoB,OAAO,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,MAAM,GAAsC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAK9F,MAAM,UAAU,GAA2C,QAAQ,CAAC,UAAU,EAAE,CAAC,MAAM,CAA2C,CAAC;IAEnI,IAAI,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;QACvC,MAAM,YAAY,GAAkC,UAAU,CAAC,OAAO,CAAC,CAAC;QACxE,yBAAyB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QAEtD,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG,YAAY,EAAE,CAAC;IACzC,CAAC;IAED,OAAO,MAAM,CAAC;AACf,CAAC,CAAC","sourcesContent":["import type { EApiDtoType, EApiRouteType } from \"../../enum\";\nimport type { IDtoStrategy } from \"../../interface\";\nimport type { TApiPropertyDescribeDtoProperties, TApiPropertyDescribeProperties, TDtoGenerateIsAllowedCombination } from \"../../type\";\n\nimport { DTO_UTILITY_CONSTANT } from \"../../constant/utility/dto/constant\";\n\nimport { DtoValidatePropertyConfig } from \"./validate-property-config.utility\";\n\n// eslint-disable-next-line @elsikora/typescript/no-unnecessary-type-parameters\nexport const DtoGetDecoratorConfig = <M extends EApiRouteType, D extends EApiDtoType>(method: M, metadata: TApiPropertyDescribeProperties, dtoType: D, propertyName: string): TApiPropertyDescribeDtoProperties => {\n\tconst strategy: Record<EApiDtoType, IDtoStrategy>[D] = DTO_UTILITY_CONSTANT.DTO_STRATEGIES[dtoType];\n\n\tif (!strategy) {\n\t\tthrow new Error(`Unknown DTO type ${dtoType}`);\n\t}\n\n\tlet config: TApiPropertyDescribeDtoProperties = strategy.getDecoratorConfig(method, metadata);\n\n\ttype TAllowed = TDtoGenerateIsAllowedCombination<M, D>;\n\ttype TPropertiesType = TAllowed extends true ? TApiPropertyDescribeDtoProperties : never;\n\n\tconst properties: Record<D, TPropertiesType> | undefined = metadata.properties?.[method] as Record<D, TPropertiesType> | undefined;\n\n\tif (properties && properties[dtoType]) {\n\t\tconst customConfig: Record<D, TPropertiesType>[D] = properties[dtoType];\n\t\tDtoValidatePropertyConfig(customConfig, propertyName);\n\n\t\tconfig = { ...config, ...customConfig };\n\t}\n\n\treturn config;\n};\n"]}