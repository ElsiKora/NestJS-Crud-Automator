{"version":3,"file":"get-entity-columns.utility.js","sourceRoot":"","sources":["get-entity-columns.utility.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,sBAAsB,EAAE,MAAM,SAAS,CAAC;AAEjD,MAAM,UAAU,gBAAgB,CAAI,UAAuC;IAC1E,MAAM,EAAE,MAAM,EAAE,uBAAuB,EAAE,uBAAuB,EAAE,GAAgC,UAAU,CAAC;IAE7G,MAAM,OAAO,GAA8B,sBAAsB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAA0B,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;IAE5I,MAAM,SAAS,GAAgC,sBAAsB,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,QAA8B,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;IAExJ,IAAI,WAA2B,CAAC;IAEhC,IAAI,uBAAuB,EAAE,CAAC;QAC7B,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,QAA8B,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAmB,CAAC;IAC1G,CAAC;SAAM,CAAC;QAEP,MAAM,mBAAmB,GAAmB,OAAO,CAAC,MAAM,CAAC,CAAC,MAA0B,EAAE,EAAE,CAAC,CAAC,uBAAuB,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,MAA0B,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAmB,CAAC;QAEpQ,MAAM,aAAa,GAAmB,SAAS,CAAC,GAAG,CAAC,CAAC,QAA8B,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAmB,CAAC;QAEjI,WAAW,GAAG,CAAC,GAAG,mBAAmB,EAAE,GAAG,aAAa,CAAC,CAAC;IAC1D,CAAC;IAED,OAAO,WAAW,CAAC;AACpB,CAAC","sourcesContent":["import type { ColumnMetadataArgs } from \"typeorm/metadata-args/ColumnMetadataArgs\";\nimport type { RelationMetadataArgs } from \"typeorm/metadata-args/RelationMetadataArgs\";\n\nimport type { IGetEntityColumnsProperties } from \"../interface/utility/get-entity-columns-properties.interface\";\n\nimport { getMetadataArgsStorage } from \"typeorm\";\n\nexport function GetEntityColumns<E>(properties: IGetEntityColumnsProperties): Array<keyof E> {\n\tconst { entity, shouldTakeGeneratedOnly, shouldTakeRelationsOnly }: IGetEntityColumnsProperties = properties;\n\n\tconst columns: Array<ColumnMetadataArgs> = getMetadataArgsStorage().columns.filter((column: ColumnMetadataArgs) => column.target == entity);\n\n\tconst relations: Array<RelationMetadataArgs> = getMetadataArgsStorage().relations.filter((relation: RelationMetadataArgs) => relation.target == entity);\n\n\tlet columnNames: Array<keyof E>;\n\n\tif (shouldTakeRelationsOnly) {\n\t\tcolumnNames = relations.map((relation: RelationMetadataArgs) => relation.propertyName) as Array<keyof E>;\n\t} else {\n\t\t// eslint-disable-next-line @elsikora/typescript/prefer-nullish-coalescing\n\t\tconst columnPropertyNames: Array<keyof E> = columns.filter((column: ColumnMetadataArgs) => !shouldTakeGeneratedOnly || column.options.generated || column.options.default !== undefined).map((column: ColumnMetadataArgs) => column.propertyName) as Array<keyof E>;\n\n\t\tconst relationNames: Array<keyof E> = relations.map((relation: RelationMetadataArgs) => relation.propertyName) as Array<keyof E>;\n\n\t\tcolumnNames = [...columnPropertyNames, ...relationNames];\n\t}\n\n\treturn columnNames;\n}\n"]}