{"version":3,"file":"generate-entity-information.utility.js","sourceRoot":"","sources":["generate-entity-information.utility.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ColumnType } from \"typeorm\";\nimport type { ColumnMetadataArgs } from \"typeorm/metadata-args/ColumnMetadataArgs\";\nimport type { DiscriminatorValueMetadataArgs } from \"typeorm/metadata-args/DiscriminatorValueMetadataArgs\";\nimport type { RelationMetadataArgs } from \"typeorm/metadata-args/RelationMetadataArgs\";\nimport type { TableMetadataArgs } from \"typeorm/metadata-args/TableMetadataArgs\";\n\nimport type { IApiBaseEntity, IApiEntity, IApiEntityColumn } from \"../interface\";\n\nimport { DefaultNamingStrategy, getMetadataArgsStorage } from \"typeorm\";\n\nimport { MetadataStorage } from \"../class\";\n\nimport { ErrorException } from \"./error-exception.utility\";\n\nexport function GenerateEntityInformation<E>(entity: IApiBaseEntity): IApiEntity<E> {\n\tconst generatedEntity: IApiEntity<E> = {\n\t\tcolumns: [],\n\t\tname: \"\",\n\t\tprimaryKey: undefined,\n\t\ttableName: \"\",\n\t};\n\n\tgeneratedEntity.tableName = ((): string => {\n\t\t// eslint-disable-next-line @elsikora/typescript/no-unsafe-function-type\n\t\tconst table: TableMetadataArgs | undefined = getMetadataArgsStorage().tables.find(({ target }: TableMetadataArgs): boolean => (target as Function).name === entity.name);\n\n\t\tif (!table) {\n\t\t\tthrow ErrorException(`Table for entity ${String(entity.name)} not found in metadata storage`);\n\t\t}\n\n\t\tconst namingStrategy = (tableName: string | undefined): string => new DefaultNamingStrategy().tableName(entity.name ?? \"UnknownResource\", tableName);\n\n\t\tif (!table.name && table.type === \"entity-child\") {\n\t\t\tconst discriminatorValue: DiscriminatorValueMetadataArgs | undefined = getMetadataArgsStorage().discriminatorValues.find(({ target }: DiscriminatorValueMetadataArgs): boolean => target == entity);\n\n\t\t\tif (!discriminatorValue?.value) {\n\t\t\t\tthrow ErrorException(`Discriminator value for entity ${String(entity.name)} not found in metadata storage`);\n\t\t\t} else if (typeof discriminatorValue.value === \"string\") {\n\t\t\t\treturn namingStrategy(discriminatorValue.value);\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @elsikora/typescript/no-unsafe-argument,@elsikora/typescript/no-unsafe-member-access\n\t\t\t\treturn namingStrategy(discriminatorValue.value?.name);\n\t\t\t}\n\t\t}\n\n\t\treturn namingStrategy(table.name);\n\t})();\n\n\tgeneratedEntity.name = entity.name;\n\n\tconst storage: MetadataStorage = MetadataStorage.getInstance();\n\n\t// eslint-disable-next-line @elsikora/typescript/no-unsafe-function-type\n\tconst columnList: Array<ColumnMetadataArgs> = getMetadataArgsStorage().columns.filter(({ target }: ColumnMetadataArgs): boolean => (target as Function).name === entity.name);\n\n\t// eslint-disable-next-line @elsikora/typescript/no-unsafe-function-type\n\tconst relationList: Array<RelationMetadataArgs> = getMetadataArgsStorage().relations.filter(({ target }: RelationMetadataArgs): boolean => (target as Function).name === entity.name);\n\n\tconst entityColumns: Array<IApiEntityColumn<E>> = [\n\t\t...columnList.map(({ options, propertyName }: ColumnMetadataArgs) => ({\n\t\t\tisPrimary: Boolean(options.primary),\n\t\t\tmetadata: (storage.getMetadata(entity.name ?? \"UnknownResource\", propertyName) as Record<string, any>) || undefined,\n\t\t\tname: propertyName as keyof E,\n\t\t\t// eslint-disable-next-line @elsikora/typescript/no-non-null-assertion\n\t\t\ttype: options.type!,\n\t\t})),\n\t\t...relationList.map(({ propertyName, relationType }: RelationMetadataArgs) => ({\n\t\t\tisPrimary: false,\n\t\t\tmetadata: (storage.getMetadata(entity.name ?? \"UnknownResource\", propertyName) as Record<string, any>) || undefined,\n\t\t\tname: propertyName as keyof E,\n\t\t\ttype: relationType as ColumnType,\n\t\t})),\n\t];\n\n\tfor (const column of entityColumns) {\n\t\tif (column.isPrimary) {\n\t\t\tgeneratedEntity.primaryKey = column;\n\t\t}\n\t}\n\n\tgeneratedEntity.columns = entityColumns;\n\n\treturn generatedEntity;\n}\n"]}