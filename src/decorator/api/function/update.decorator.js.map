{"version":3,"file":"update.decorator.js","sourceRoot":"","sources":["update.decorator.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,aAAa,EAAE,4BAA4B,EAAE,MAAM,gBAAgB,CAAC;AAE7E,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,0CAA0C,CAAC;AAC1E,OAAO,EAAE,WAAW,EAAE,MAAM,uCAAuC,CAAC;AAEpE,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAGjD,MAAM,UAAU,iBAAiB,CAA2B,UAAkC;IAC7F,MAAM,EAAE,MAAM,EAAE,GAA2B,UAAU,CAAC;IACtD,MAAM,YAAY,GAA6F,cAAc,CAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IAC7I,IAAI,WAAqE,CAAC;IAE1E,OAAO,UAAU,MAAe,EAAE,WAAmB,EAAE,UAA8B;QAEpF,KAAK,MAAM,CAAC;QAEZ,KAAK,WAAW,CAAC;QAEjB,UAAU,CAAC,KAAK,GAAG,KAAK,WAIvB,QAAuC,EACvC,UAA2C;YAE3C,MAAM,UAAU,GAAkB,IAAI,CAAC,UAAU,CAAC;YAElD,IAAI,CAAC,UAAU,EAAE,CAAC;gBACjB,MAAM,cAAc,CAAC,6CAA6C,CAAC,CAAC;YACrE,CAAC;YAED,IAAI,CAAC,WAAW,EAAE,CAAC;gBAClB,MAAM,aAAa,GAAsF;oBACxG,KAAK,EAAE;wBACN,OAAO,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBAC1D,CAAC;iBACD,CAAC;gBACF,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;gBAEzC,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC;oBACzB,WAAW,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC9C,CAAC;qBAAM,CAAC;oBACP,MAAM,cAAc,CAAC,wCAAwC,CAAC,CAAC;gBAChE,CAAC;YACF,CAAC;YAED,OAAO,QAAQ,CAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;QAC/E,CAAC,CAAC;QAEF,OAAO,UAAU,CAAC;IACnB,CAAC,CAAC;AACH,CAAC;AAED,KAAK,UAAU,QAAQ,CAA2B,OAAgD;IACjG,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,GAA4C,OAAO,CAAC;IAEnH,IAAI,CAAC;QACJ,MAAM,cAAc,GAAM,MAAM,WAAW,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEjE,MAAM,iBAAiB,GAAe,EAAE,CAAC;QAEzC,MAAM,YAAY,GAAiC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAiC,CAAC;QAE9G,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,YAAY,EAAE,CAAC;YACzC,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;gBAC3B,iBAAiB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAChC,CAAC;QACF,CAAC;QAED,MAAM,YAAY,GAAmB;YACpC,GAAG,cAAc;YACjB,GAAG,iBAAiB;SACpB,CAAC;QAEF,OAAO,MAAM,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAChB,IAAI,KAAK,YAAY,aAAa,EAAE,CAAC;YACpC,MAAM,KAAK,CAAC;QACb,CAAC;QAED,MAAM,IAAI,4BAA4B,CACrC,WAAW,CAAC;YACX,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,kBAAkB,CAAC,cAAc;SACvC,CAAC,CACF,CAAC;IACH,CAAC;AACF,CAAC","sourcesContent":["import type { DeepPartial, Repository } from \"typeorm\";\n\nimport type { IApiBaseEntity, IApiFunctionProperties } from \"../../../interface\";\nimport type { IApiFunctionUpdateExecutorProperties } from \"../../../interface/decorator/api/function/update-executor-properties.interface\";\nimport type { TApiFunctionGetProperties, TApiFunctionUpdateCriteria, TApiFunctionUpdateProperties } from \"../../../type\";\n\nimport { HttpException, InternalServerErrorException } from \"@nestjs/common\";\n\nimport { EErrorStringAction } from \"../../../enum\";\nimport { ErrorException } from \"../../../utility/error-exception.utility\";\nimport { ErrorString } from \"../../../utility/error-string.utility\";\n\nimport { ApiFunctionGet } from \"./get.decorator\";\n\n// eslint-disable-next-line @elsikora/typescript/no-unnecessary-type-parameters\nexport function ApiFunctionUpdate<E extends IApiBaseEntity>(properties: IApiFunctionProperties) {\n\tconst { entity }: IApiFunctionProperties = properties;\n\tconst getDecorator: (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor = ApiFunctionGet<E>({ entity });\n\tlet getFunction: (properties: TApiFunctionGetProperties<E>) => Promise<E>;\n\n\treturn function (target: unknown, propertyKey: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n\t\t// eslint-disable-next-line @elsikora/sonar/void-use\n\t\tvoid target;\n\t\t// eslint-disable-next-line @elsikora/sonar/void-use\n\t\tvoid propertyKey;\n\n\t\tdescriptor.value = async function (\n\t\t\tthis: {\n\t\t\t\trepository: Repository<E>;\n\t\t\t},\n\t\t\tcriteria: TApiFunctionUpdateCriteria<E>,\n\t\t\tproperties: TApiFunctionUpdateProperties<E>,\n\t\t): Promise<E> {\n\t\t\tconst repository: Repository<E> = this.repository;\n\n\t\t\tif (!repository) {\n\t\t\t\tthrow ErrorException(\"Repository is not available in this context\");\n\t\t\t}\n\n\t\t\tif (!getFunction) {\n\t\t\t\tconst getDescriptor: TypedPropertyDescriptor<(properties: TApiFunctionGetProperties<E>) => Promise<E>> = {\n\t\t\t\t\tvalue: function () {\n\t\t\t\t\t\treturn Promise.reject(ErrorException(\"Not implemented\"));\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tgetDecorator(this, \"get\", getDescriptor);\n\n\t\t\t\tif (getDescriptor.value) {\n\t\t\t\t\tgetFunction = getDescriptor.value.bind(this);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ErrorException(\"Get function is not properly decorated\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn executor<E>({ criteria, entity, getFunction, properties, repository });\n\t\t};\n\n\t\treturn descriptor;\n\t};\n}\n\nasync function executor<E extends IApiBaseEntity>(options: IApiFunctionUpdateExecutorProperties<E>): Promise<E> {\n\tconst { criteria, entity, getFunction, properties, repository }: IApiFunctionUpdateExecutorProperties<E> = options;\n\n\ttry {\n\t\tconst existingEntity: E = await getFunction({ where: criteria });\n\n\t\tconst updatedProperties: Partial<E> = {};\n\n\t\tconst typedEntries: Array<[keyof E, E[keyof E]]> = Object.entries(properties) as Array<[keyof E, E[keyof E]]>;\n\n\t\tfor (const [key, value] of typedEntries) {\n\t\t\tif (key in existingEntity) {\n\t\t\t\tupdatedProperties[key] = value;\n\t\t\t}\n\t\t}\n\n\t\tconst mergedEntity: DeepPartial<E> = {\n\t\t\t...existingEntity,\n\t\t\t...updatedProperties,\n\t\t};\n\n\t\treturn await repository.save(mergedEntity);\n\t} catch (error) {\n\t\tif (error instanceof HttpException) {\n\t\t\tthrow error;\n\t\t}\n\n\t\tthrow new InternalServerErrorException(\n\t\t\tErrorString({\n\t\t\t\tentity: entity,\n\t\t\t\ttype: EErrorStringAction.UPDATING_ERROR,\n\t\t\t}),\n\t\t);\n\t}\n}\n"]}