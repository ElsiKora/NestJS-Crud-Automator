import { HttpException, InternalServerErrorException } from "@nestjs/common";

import { EErrorStringAction } from "../../../enum";

import { ErrorException, ErrorString, GetEntityColumns } from "../../../utility";

import type { IApiBaseEntity } from "../../../interface";
import type { IApiFunctionCreateProperties } from "../../../interface/decorator/api/function/create-properties.interface";
import type { IApiFunctionCreateExecutorProperties, TApiFunctionCreateProperties } from "../../../type";

import type { DeepPartial, Repository } from "typeorm";

async function executor<E extends IApiBaseEntity>(options: IApiFunctionCreateExecutorProperties<E>): Promise<E> {
	const { entity, properties, repository }: IApiFunctionCreateExecutorProperties<E> = options;

	try {
		try {
			const allColumns: Array<keyof E> = GetEntityColumns({ entity});
			const autoGeneratedColumns: Array<keyof E> = GetEntityColumns({ entity, shouldTakeGeneratedOnly: true });

			const filteredProperties: DeepPartial<E> = {} as DeepPartial<E>;

			for (const key of Object.keys(properties) as Array<keyof TApiFunctionCreateProperties<E>>) {
				if (allColumns.includes(key) && !autoGeneratedColumns.includes(key)) {
					(filteredProperties as Record<keyof E, unknown>)[key] = properties[key];
				}
			}

			console.log("ITOGO PERED SOZDANIEM", filteredProperties);
			const newEntity: E = repository.create(filteredProperties);

			return await repository.save(newEntity);
		} catch (error) {
			console.log("FUCK", error);

			throw error;
		}
	} catch (error) {
		if (error instanceof HttpException) {
			throw error;
		}

		throw new InternalServerErrorException(
			ErrorString({
				entity: entity,
				type: EErrorStringAction.CREATING_ERROR,
			}),
		);
	}
}

export function ApiFunctionCreate(properties: IApiFunctionCreateProperties) {
	const { entity }: IApiFunctionCreateProperties = properties;

	return function (target: unknown, propertyKey: string, descriptor: PropertyDescriptor): PropertyDescriptor {
		void target;
		void propertyKey;

		descriptor.value = async function (
			this: {
				repository: Repository<typeof entity>;
			},
			properties: TApiFunctionCreateProperties<typeof entity>,
		): Promise<IApiBaseEntity> {
			const repository: Repository<typeof entity> = this.repository;

			if (!repository) {
				throw ErrorException("Repository is not available in this context");
			}

			return executor({ entity, properties, repository });
		};

		return descriptor;
	};
}
